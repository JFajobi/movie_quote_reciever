// Generated by CoffeeScript 1.7.1
(function() {
  var _base,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.Movie || (window.Movie = {});

  (_base = window.Movie).Views || (_base.Views = {});

  Movie.Views.MainDisplayView = (function(_super) {
    __extends(MainDisplayView, _super);

    function MainDisplayView() {
      this.setPlayerInfo = __bind(this.setPlayerInfo, this);
      this.setVsView = __bind(this.setVsView, this);
      this.launchMultiplayer = __bind(this.launchMultiplayer, this);
      this.setPlayerAsReady = __bind(this.setPlayerAsReady, this);
      this.setPlayerNumber = __bind(this.setPlayerNumber, this);
      this.displayResults = __bind(this.displayResults, this);
      this.pulsate = __bind(this.pulsate, this);
      this.parseMessage = __bind(this.parseMessage, this);
      return MainDisplayView.__super__.constructor.apply(this, arguments);
    }

    MainDisplayView.prototype.initialize = function() {
      this.loadCastRequirements();
      this.playerOne = {
        ready: false,
        name: null,
        score: null,
        senderId: null
      };
      this.playerTwo = {
        ready: false,
        name: null,
        score: null,
        senderId: null
      };
      return this.notStarted = true;
    };

    MainDisplayView.prototype.loadCastRequirements = function() {
      cast.receiver.logger.setLevelValue(cast.receiver.LoggerLevel.DEBUG);
      this.castReceiverManager = cast.receiver.CastReceiverManager.getInstance();
      this.customMessageBus = this.castReceiverManager.getCastMessageBus('urn:x-cast:movie.quote.game');
      this.castReceiverManager.onSenderConnected = this.senderConnected;
      this.castReceiverManager.start();
      return this.customMessageBus.onMessage = this.parseMessage;
    };

    MainDisplayView.prototype.parseMessage = function(e) {
      var message;
      message = JSON.parse(e.data);
      if (message.displayMessage) {
        this.displayMessage = message.displayMessage;
        if (this.message != null) {
          clearInterval(this.message);
        }
        this.message = setInterval(this.pulsate, 700);
      }
      if (message.playerNumber) {
        this.setPlayerNumber(message.playerNumber);
      }
      if (message.setPlayerInfo) {
        this.setPlayerInfo(message.setPlayerInfo, e.senderId);
      }
      if (message.ready) {
        this.setPlayerAsReady(e.senderId);
      }
      if (message.results) {
        return this.results = setInterval(this.displayResults(message.results, e.senderId), 4000);
      }
    };

    MainDisplayView.prototype.pulsate = function() {
      $("#message").html(this.displayMessage);
      return $("#message").fadeToggle();
    };

    MainDisplayView.prototype.displayResults = function(score, senderId) {
      var resultsView;
      this.gatheringResultInfo = true;
      if (this.playerOne.senderId === senderId) {
        this.playerOne.score = score;
      } else {
        this.playerTwo.score = score;
      }
      if (this.playerOne.score && this.playerTwo.score && this.gatheringResultInfo) {
        clearInterval(this.results);
        resultsView = new Movie.Views.ResultsView({
          el: ".container",
          attributes: {
            playerOne: this.playerOne,
            playerTwo: this.playerTwo
          }
        });
        this.gatheringResultInfo = false;
        return resultsView.render();
      }
    };

    MainDisplayView.prototype.setPlayerNumber = function(numberOfPlayers) {
      if (numberOfPlayers === 'single-player') {
        return setTimeout((function(_this) {
          return function() {
            return _this.customMessageBus.broadcast("start");
          };
        })(this), 2000);
      } else {
        return this.launchGame = setInterval(this.launchMultiplayer, 4000);
      }
    };

    MainDisplayView.prototype.setPlayerAsReady = function(playerId) {
      if (this.playerOne.senderId === playerId) {
        return this.playerOne.ready = true;
      } else {
        return this.playerTwo.ready = true;
      }
    };

    MainDisplayView.prototype.launchMultiplayer = function() {
      if (this.playerOne.ready && this.playerTwo.ready && this.notStarted) {
        clearInterval(this.launchGame);
        this.launchGame = 0;
        this.setVsView(this.playerOne.name, this.playerTwo.name);
        this.customMessageBus.send(this.playerOne.senderId, "round one");
        setTimeout((function(_this) {
          return function() {
            return _this.customMessageBus.broadcast("start");
          };
        })(this), 2500);
        return this.notStarted = false;
      }
    };

    MainDisplayView.prototype.setVsView = function(player1, player2) {
      var vsView;
      vsView = new Movie.Views.VsView({
        el: ".container",
        attributes: {
          player1: player1,
          player2: player2
        }
      });
      return vsView.render();
    };

    MainDisplayView.prototype.setPlayerInfo = function(name, senderId) {
      if (this.playerOne.name != null) {
        this.playerTwo.name = name;
        return this.playerTwo.senderId = senderId;
      } else {
        this.playerOne.name = name;
        return this.playerOne.senderId = senderId;
      }
    };

    MainDisplayView.prototype.senderConnected = function(e) {};

    return MainDisplayView;

  })(Backbone.View);

}).call(this);
